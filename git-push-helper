#!/bin/bash

# git-push-helper.sh ‚Äî A stylish Git helper for add, commit, and push with smart remote & flags.

set -e

# === Config ===
ADD_PATHS=()
REMOTE="origin"
BRANCH=""
COMMIT_MSG=""
POSITIONAL_REMOTE=""
AUTO_CONFIRM=false

# === Colors ===
GREEN='\e[0;32m'
RED='\e[0;31m'
YELLOW='\e[1;33m'
CYAN='\e[1;36m'
NC='\e[0m' # No color

# === Banner ===
print_banner() {
echo -e "${CYAN}"
cat << "EOF"
   /               \
  |   .---------.   |@
  '---' .-----. '---'@
    .' /6 5_4 3\ '.  @
    | |7 /...\ 2| |  @
    | |8 \___/ 1| |  @
    |  \_9_0_)\/  |  @@
 /==|_____________|@@@@
 H-------------------@@
 H   )  ||   ||  (   @@
 H  /   ||   ||   \   @
 H |----''---''----|
=/ |_______________|
EOF
echo -e "${NC}"
}

# === Help ===
show_help() {
  echo -e "${GREEN}Usage:${NC}"
  echo "  $(basename "$0") -m \"<message>\" [toto/<repo> | bomi/<repo>] [-p <paths...>] [-r <remote>] [-b <branch>] [--yes]"
  echo
  echo -e "${GREEN}Options:${NC}"
  echo "  -m \"<message>\"     Commit message (REQUIRED)"
  echo "  -p <paths...>      Paths to add (default: .)"
  echo "  -r <remote>        Remote name (default: origin)"
  echo "  -b <branch>        Branch name (default: current Git branch)"
  echo "  --yes              Auto-confirm push without prompt"
  echo "  -h, --help         Show help"
  echo
  echo -e "${GREEN}Examples:${NC}"
  echo "  ./$(basename "$0") -m \"Fix UI\" toto/my-repo"
  echo "  ./$(basename "$0") -m \"Init\" --yes bomi/secret-proj"
}

# === Arg Parsing ===
while [[ $# -gt 0 ]]; do
  case "$1" in
    -m)
      shift
      COMMIT_MSG="$1"
      ;;
    -p)
      shift
      while [[ "$1" && "$1" != -* ]]; do
        ADD_PATHS+=("$1")
        shift
      done
      continue
      ;;
    -r)
      shift
      REMOTE="$1"
      ;;
    -b)
      shift
      BRANCH="$1"
      ;;
    --yes)
      AUTO_CONFIRM=true
      ;;
    -h|--help)
      print_banner
      show_help
      exit 0
      ;;
    *)
      # Accepts positional shortcut like "toto/repo-name"
      if [[ "$1" =~ ^(toto|bomi)\/[a-zA-Z0-9._-]+$ ]]; then
        POSITIONAL_REMOTE="$1"
      else
        echo -e "${RED}‚ùå Unknown argument or path: $1${NC}"
        show_help
        exit 1
      fi
      ;;
  esac
  shift
done

# === Start ===
print_banner

# === Validate commit message ===
if [[ -z "$COMMIT_MSG" ]]; then
  echo -e "${RED}‚ùå Commit message (-m) is required.${NC}"
  show_help
  exit 1
fi

# === Default path ===
if [[ ${#ADD_PATHS[@]} -eq 0 ]]; then
  ADD_PATHS+=(".")
fi

# === Auto-detect branch ===
if [[ -z "$BRANCH" ]]; then
  BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "")
  if [[ -z "$BRANCH" ]]; then
    echo -e "${RED}‚ùå Could not detect current Git branch. Use -b option.${NC}"
    exit 1
  fi
fi

# === Convert shorthand to remote URL ===
if [[ -n "$POSITIONAL_REMOTE" ]]; then
  if [[ "$POSITIONAL_REMOTE" =~ ^toto\/(.+)$ ]]; then
    REPO_NAME="${BASH_REMATCH[1]}"
    REMOTE_URL="git@github-teeravist:TEERAVIST/${REPO_NAME}.git"
  elif [[ "$POSITIONAL_REMOTE" =~ ^bomi\/(.+)$ ]]; then
    REPO_NAME="${BASH_REMATCH[1]}"
    REMOTE_URL="git@github-Bhornpat:Bhornpat/${REPO_NAME}.git"
  fi

  if git remote get-url "$REMOTE" &>/dev/null; then
    echo -e "${YELLOW}üîÅ Updating remote '$REMOTE' URL to:${NC} $REMOTE_URL"
    git remote set-url "$REMOTE" "$REMOTE_URL"
  else
    echo -e "${YELLOW}‚ûï Adding remote '$REMOTE' with URL:${NC} $REMOTE_URL"
    git remote add "$REMOTE" "$REMOTE_URL"
  fi
fi

# === Add files ===
echo -e "${YELLOW}‚ûï Staging files...${NC}"
for path in "${ADD_PATHS[@]}"; do
  echo "   ‚Ä¢ git add $path"
  git add "$path"
done

# === Check staged ===
if git diff --cached --quiet; then
  LAST_COMMIT=$(git log -1 --pretty=%B 2>/dev/null || echo "")

  if [[ "$LAST_COMMIT" == "$COMMIT_MSG" ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è No changes staged. Last commit matches: '${COMMIT_MSG}'${NC}"
    echo -e "${GREEN}‚û°Ô∏è Proceeding to push anyway...${NC}"
  else
    echo -e "${RED}‚ö†Ô∏è No changes staged and no matching commit found. Nothing to do.${NC}"
    exit 1
  fi
else
  echo -e "${YELLOW}üìù Committing: ${CYAN}$COMMIT_MSG${NC}"
  git commit -m "$COMMIT_MSG"
fi

# === Push ===
echo -e "${YELLOW}üöÄ Ready to push to ${CYAN}${REMOTE}/${BRANCH}${NC}"
if $AUTO_CONFIRM; then
  git push "$REMOTE" "$BRANCH"
  echo -e "${GREEN}‚úÖ Push complete!${NC}"
else
  read -p "Push now? [y/N]: " CONFIRM
  if [[ "$CONFIRM" =~ ^[Yy]$ ]]; then
    git push "$REMOTE" "$BRANCH"
    echo -e "${GREEN}‚úÖ Push complete!${NC}"
  else
    echo -e "${YELLOW}üö´ Push canceled.${NC}"
  fi
fi

